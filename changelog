4/8/25:

- Consolidate event listeners
- Add maxLength functionality to operation switch statement to keep result within specified length
- Add limitLength to event listeners
- Use inputCount and maxLength to create limitLength function to limit amount of digits allowed in display from user input
- Add inputCount and maxLength
- Add decimalCounter and if statement to only allow 1 decimal point per number
- Update equals event listener
- Update storeSecondVariable function
- Create resetAfterEquals function
- Reorganize buttons into numerical order
- Create handleOperator function
- Update operator event handlers
- Fix issue of digits summing together after clear being pressed
- Change toString and Number conversion to use Number and join instead
- Change temp1 += digit to use push instead
- Remove enterPress function because it wasn't working correctly
- Fix storeFirstVariable and storeSecondVariable functions since storeSecondVariable wasn't correctly displaying the input

4/7/25:

- Create enterPress function
- Create zeroCalculator function to fully zero out variables
- Display shows error message if dividing by 0
- Create storeFirstVariable and storeSecondVariable functions to store variables
- Add array to store user input
- Create clearDisplay function to clear display
- Make outer borders of buttons and container thicker
- Change multiplication operator symbol in html
- Add operate function within operator event listeners
- Replace group button border styling with individual
- Change borders to rounded corners
- Remove missing border areas
- Add margin and border around functional portion of calculator

4/5/25:

- Remove spaces from around operators when clicked
- Change string numbers to actual numbers
- Make calculator start at 0 and clear reset to 0
- Change enter button color and hover color
- Create functional clear and backspace keys
- Create functional displayVariable to show pressed numbers and/or symbols
- Add button ids and event listeners for all numbers and symbols
- Add header color and display content
- Add css styling to calculator
- Create (non-functional) html calculator
- Create html content div with header and container inside and add styling
- Replace temporary variables with temporary values in user input variables
- Replace basic mathematical operator functions with switch statement within operate function
- Create variables to store user inputs
- Add commenting in css file
- Create basic mathematical operator functions and temporary number variables for testing

4/4/25:

- Add mathematical!
- Create pseudocode plan
- Set up index boilerplate
- Create README, index.html, calc.js, calcStyle.css, pseudocode file
